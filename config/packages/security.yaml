security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        #Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Domain\Blog\Entity\User:
            algorithm: 'auto'
            cost: 4
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            id: App\Symfony\Security\UserProvider
            #entity:
            #    class: App\Domain\Blog\Entity\User
            #    property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            #stateless: true
            lazy: true
            provider: app_user_provider

            logout:
                path: logout

            custom_authenticators:
                - App\Symfony\Security\Authenticator\LoginFormAuthenticator
                - App\Symfony\Security\Authenticator\TokenAuthenticator

            #remember_me:
            #    secret: '%kernel.secret%' # required
            #    lifetime: 3600 #604800 # 1 week in seconds
                # by default, the feature is enabled by checking a
                # checkbox in the login form (see below), uncomment the
                # following line to always enable it.
              #  always_remember_me: true

            #form_login:
                # "app_login" is the name of the route created previously
             #   login_path: login
              #  check_path: login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            #Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            #    algorithm: auto
            #    cost: 4 # Lowest possible value for bcrypt
            #    time_cost: 3 # Lowest possible value for argon
            #    memory_cost: 10 # Lowest possible value for argon
